#!/usr/bin/python3.3 -S
import fcntl, os, subprocess, urllib.parse, tempfile, termios

unquote = urllib.parse.unquote

subprocess.check_call('mount -t proc proc /proc'.split())
subprocess.check_call('mount -t sysfs sysfs /sys'.split())
subprocess.check_call('mount -t tmpfs tmpfs /run'.split())
# Or set CONFIG_DEVTMPFS_MOUNT
subprocess.call('mount -t devtmpfs devtmpfs /dev'.split(), stderr=subprocess.DEVNULL)
subprocess.check_call('ln -sT /proc/self/fd /dev/fd'.split())

# Set controlling tty
os.setsid()
fcntl.ioctl(0, termios.TIOCSCTTY, 0)

# Reset windows size
# If this is resized after boot, call `resize` manually.
# The guest won't get SIGWINCH.
try:
    subprocess.call(['resize'], stdout=subprocess.DEVNULL)
except OSError:
    # Not installed
    pass

# At least the Debian and Ubuntu UML package uses this
subprocess.call(
    'mount -t hostfs -o /usr/lib/uml/modules hostfs /lib/modules'.split(),
    stderr=subprocess.DEVNULL)

env = os.environ['VIDO_ENV']
cmd = os.environ['VIDO_CMD']

cmd = [unquote(arg) for arg in cmd.split('+')]
env = {unquote(var): unquote(val) for (var, val) in
           (item.split('=', 1) for item in env.split(';'))}
cwd = env['PWD']

if 'VIDO_RWDIRS' in os.environ:
    rw_dirs = os.environ['VIDO_RWDIRS']
    rw_dirs = [unquote(arg) for arg in rw_dirs.split(':')]
    for dn in rw_dirs:
        tdn = tempfile.mkdtemp()
        subprocess.check_call('mount -t tmpfs tmpfs --'.split() + [tdn])
        if False:
            # XXX Make this best-effort, some files may not be readable
            subprocess.call(['cp', '-aT', '--', dn, tdn], stderr=subprocess.DEVNULL)
            subprocess.check_call(['mount', '--move', '--', tdn, dn])
        elif True:
            # Requires overlayfs
            subprocess.check_call(
                'mount -t overlayfs overlayfs'.split()
                + ['-olowerdir={},upperdir={}'.format(dn, tdn), dn])

if 'VIDO_CLEARDIRS' in os.environ:
    clear_dirs = os.environ['VIDO_CLEARDIRS']
    clear_dirs = [unquote(arg) for arg in clear_dirs.split(':')]
    for dn in clear_dirs:
        subprocess.check_call('mount -t tmpfs tmpfs --'.split() + [dn])

if 'VIDO_DISKS' in os.environ:
    disks = os.environ['VIDO_DISKS'].split(';')
    for i, disk in enumerate(disks):
        env['VIDO_DISK{}'.format(i)] = disk

rcode = subprocess.call(cmd, cwd=cwd, env=env)
if rcode == 0:
    subprocess.check_call('/sbin/poweroff -f'.split())

