#!/usr/bin/python3.3 -S
import fcntl, json, os, subprocess, urllib.parse, tempfile, termios, types

conf = json.loads(
    urllib.parse.unquote(os.environ['VIDO_CONFIG']),
    object_hook=lambda x: types.SimpleNamespace(**x))

unquote = urllib.parse.unquote

subprocess.check_call('mount -t proc proc /proc'.split())
subprocess.check_call('mount -t sysfs sysfs /sys'.split())
subprocess.check_call('mount -t tmpfs tmpfs /run'.split())
# Or set CONFIG_DEVTMPFS_MOUNT
subprocess.call('mount -t devtmpfs devtmpfs /dev'.split(), stderr=subprocess.DEVNULL)
if not os.path.exists('/dev/fd'):
    subprocess.check_call('ln -sT /proc/self/fd /dev/fd'.split())

# Set controlling tty
os.setsid()
fcntl.ioctl(0, termios.TIOCSCTTY, 0)

# Reset windows size
# If this is resized after boot, call `resize` manually.
# The guest won't get SIGWINCH.
try:
    subprocess.call(['resize'], stdout=subprocess.DEVNULL)
except OSError:
    # Not installed
    pass

# At least the Debian and Ubuntu UML package uses this
subprocess.call(
    'mount -t hostfs -o /usr/lib/uml/modules hostfs /lib/modules'.split(),
    stderr=subprocess.DEVNULL)

cmd = [unquote(arg) for arg in conf.cmd]
env = vars(conf.env)
cwd = env['PWD']


for dn in conf.rw_dirs:
    tdn = tempfile.mkdtemp()
    subprocess.check_call('mount -t tmpfs tmpfs --'.split() + [tdn])
    subprocess.check_call(
        'mount -t overlayfs overlayfs'.split()
        + ['-olowerdir={},upperdir={}'.format(dn, tdn), dn])

# a workaround from before overlayfs
if False:
    for dn in conf.rw_dirs_oldkernel:
        tdn = tempfile.mkdtemp()
        subprocess.check_call('mount -t tmpfs tmpfs --'.split() + [tdn])
        # XXX will end at the first unreadable file
        subprocess.call(
            ['cp', '-aT', '--', dn, tdn], stderr=subprocess.DEVNULL)
        subprocess.check_call(['mount', '--move', '--', tdn, dn])

for dn in conf.clear_dirs:
    subprocess.check_call('mount -t tmpfs tmpfs --'.split() + [dn])

if hasattr(conf, 'net'):
    subprocess.check_call(
        'ip addr add dev eth0'.split() + [conf.net.host])
    subprocess.check_call('ip link set eth0 up'.split())
    subprocess.check_call(
        'ip route add default via'.split() + [conf.net.router]
        + 'dev eth0'.split())

for i, disk in enumerate(conf.disks):
    env['VIDO_DISK{}'.format(i)] = disk

rcode = subprocess.call(cmd, cwd=cwd, env=env)
if rcode == 0:
    subprocess.check_call('/sbin/poweroff -f'.split())

